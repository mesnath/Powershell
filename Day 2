Scriptblock
    lines of code in script
      ex1: $b = { 1 + 1 }
      ex2: $myblock = { Get=servoce | Format-Table Name, Status }
                      ^_____________________________________^
                                        |_________________________ script block
    called with &
      ex1: & $myblock
      ex2: $a += &$b
sort
  ex1: Get-ChildItem | Sort-Object -propery length -descending
  ex1: get-childitem | Sort-Object | -property extension | format-table -groupby extension
  ex3: get-service | group-object Status format-table -gropby status
  ex4: get-variable | sort-object name format-table name, desciption -autosize -wrap
where-object
  kinda just like do the first cmdlet where applicable and specifies the parameters for it to be applicable
  ex1: get-service | Were-object{$_.Status -eq 'running'}
  ex2: get-process | where-object {$_.company -like 'micro*'} | format-table name, description, company
      -like and -notlike allow you to use wildcard (*)
get-unique
    pipe it to something and it'll only output the unique numbers or whatever the input was
measure-object
    length
    .count
     ex1: (get-childitem | measure-object length).count
    ex2: (get-childitem | measure-object length -Maximum -Minimum -Sum
compare-object
    $before
    $after

add-object
    ex1: add-member -MemberType Noteproperty -name Color -value Red -InputObject $mytruck
    ex2: Add-Member -me NoteProperty -in $mytruck -na Make -Value Ford
    ex3: Add-Member -InputObject $mytruck NoteProperty Model "F-150 Raptor"
    ex4: $mytruck | Add-Member NoteProperty Cab SuperCrew
    ex5: $soldier = [PSCustomObject]@{
                        "Firstname"    = "Joe"
                        "LastName"     = "Snuffy"
                        "MilitaryRank" = "SSG"
                        "MOS"          = "17c"
                        "Position"     = "Host Analyst"
                        "hunt"         ={"find bad"}
         }
         add-member | $soldier
